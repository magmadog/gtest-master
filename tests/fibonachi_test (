#ifndef FIBONACHI_H
#define FIBONACHI_H

#include <gtest/gtest.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>


extern "C" {
#define STDOUT 1
#include "text/text.h"
#include "text/_text.h"
#include "common.h"
}

TEST (ne_ya, createtext)
{
    text txt = create_text();
    ASSERT_EQ(pos_return(txt), 0);
}
TEST (ne_ya,show)
{
          char* str = (char*)malloc(1024);
          str[0] = '\0';
          show_line(0,str);
          SUCCEED();
          free(str);
      }
/*TEST(ne_ya, LoadFile)
{
     int fptr;
     int oldstdout;
     fptr = open("DUMMY.FIL",O_CREAT|O_RDWR,S_IREAD|S_IWRITE);
     oldstdout = dup(STDOUT);
     dup2(fptr,STDOUT);
     close(fptr);

     text txt = create_text();
     load(txt,(char *)"text.txt");
     dup2(oldstdout,STDOUT);

     FILE *t;
     t = fopen("DUMMY.FIL","rw");
     if(t == NULL){
            FAIL();
            return;
     }
     char *buf = (char*)malloc(sizeof(char)*512);
     int readcount = fread(buf,1,512,t);

     FILE *d;
     d = fopen("text.txt","rw");
     if(d == NULL){
            FAIL();
            return;
     }
     char *buf2 = (char*)malloc(sizeof(char)*512);
     int readcount2 = fread(buf2,1,512,d);
     fclose(t);
     fclose(d);
     ASSERT_EQ(readcount,readcount2);

}*/


TEST(showclassified,test1)
{
    char* str = (char*)malloc(1024);
    str[0] = '\0';
    showclassified_line(0,str);
    SUCCEED();
    free(str);
}

TEST(showclassified,test2)
{
    int fptr;
    int oldstdout;
    fptr = open("DUMMY.FIL",O_CREAT|O_RDWR,S_IREAD|S_IWRITE);
    oldstdout = dup(STDOUT);
    dup2(fptr,STDOUT);
    close(fptr);
    char* str = (char*)malloc(1024);
    sprintf(str,"bingo!");
    showclassified_line(0,str);
    dup2(oldstdout,STDOUT);
    SUCCEED();
    free(str);
}

TEST(showclassified,test3)
{

}

TEST(plb,test1)
{
    int fptr;
    int oldstdout;
    fptr = open("DUMMY.FIL",O_CREAT|O_RDWR,S_IREAD|S_IWRITE);
    oldstdout = dup(STDOUT);
    dup2(fptr,STDOUT);
    close(fptr);
    text txt = create_text();
    load(txt,(char *)"text.txt");
    dup2(oldstdout,STDOUT);
    plb(txt);
    if(dup2(oldstdout,STDOUT) < 0)
    {
        FAIL();
        return;
    }
    SUCCEED();
}

TEST(plb,test2)
{
    int fptr;
    int oldstdout;
    fptr = open("DUMMY.FIL",O_CREAT|O_RDWR,S_IREAD|S_IWRITE);
    oldstdout = dup(STDOUT);
    dup2(fptr,STDOUT);
    close(fptr);
    text txt = create_text();
    load(txt,(char *)"text.txt");
    c_to_pos(txt,0,1025);
    plb(txt);
    if(dup2(oldstdout,STDOUT) < 0)
    {
        FAIL();
        return;
    }
    SUCCEED();
}
TEST(plb,test3)
{
    int fptr;
    int oldstdout;
    fptr = open("DUMMY.FIL",O_CREAT|O_RDWR,S_IREAD|S_IWRITE);
    oldstdout = dup(STDOUT);
    dup2(fptr,STDOUT);
    close(fptr);
    text txt = create_text();
    load(txt,(char *)"text.txt");
    c_to_pos(txt,0,0);
    plb(txt);
    if(dup2(oldstdout,STDOUT) < 0)
    {
        FAIL();
        return;
    }
    SUCCEED();
}
TEST(s,test1)
{
    int fptr;
    int oldstdout;
    fptr = open("DUMMY.FIL",O_CREAT|O_RDWR,S_IREAD|S_IWRITE);
    oldstdout = dup(STDOUT);
    dup2(fptr,STDOUT);
    close(fptr);
    text txt = create_text();
    load(txt,(char *)"text.txt");
    c_to_pos(txt,0,0);
    plb(txt);
    if(dup2(oldstdout,STDOUT) < 0)
    {
        FAIL();
        return;
    }
    SUCCEED();
}

/*TEST(protest, show)
{
         int fptr;
         int oldstdout;

         fptr = open("DUMMY.BIL",O_CREAT|O_RDWR,S_IREAD|S_IWRITE);
         oldstdout = dup(STDOUT);
         dup2(fptr,STDOUT);

         char *filedir=(char*)malloc(1024);
         sprintf(filedir, "%s/text.txt", TESTSDIR);

         text txt = create_text();
         load(txt, filedir);
         show(txt);


    close(fptr);
    dup2(oldstdout,STDOUT);
         FILE *t2;
         t2 = fopen("DUMMY.BIL","rw");
         if(t2 == NULL){
                FAIL();
                return;
         }
         char *buf = (char*)malloc(sizeof(char)*512);
         int readcount = fread(buf,1,512,t2);

         FILE *d2;
         sprintf(filedir, "%s/proveka.txt", TESTSDIR);
         d2 =fopen(filedir,"rw");

         if(d2 == NULL){
                FAIL();
                return;
         }
         char *buf2 = (char*)malloc(sizeof(char)*512);
         int readcount2 = fread(buf2,1,512,d2);
         fclose(t2);
         fclose(d2);
         ASSERT_EQ(readcount,readcount2);

}*/

#endif // FIBONACHI_H
